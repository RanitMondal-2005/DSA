# Preorder = root-> left-> right
# METHODC 1- STACK BASED
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# preorder= root->left->right
class Solution: # stack'/iterative based solution
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root is None:
            return []
        ans=[]
        stack=[root]
        while len(stack)>0:
            node=stack.pop()
            ans.append(node.val)
            if node.right is not None:
                stack.append(node.right)
            if node.left is not None:
                stack.append(node.left)
        return ans


# METHOD 2- RECURSION BASED
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# preorder= root->left->right
class Solution: # stack'/iterative based solution
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root is None:
            return []
        ans=[]
        stack=[root]
        while len(stack)>0:
            node=stack.pop()
            ans.append(node.val)
            if node.right is not None:
                stack.append(node.right)
            if node.left is not None:
                stack.append(node.left)
        return ans
