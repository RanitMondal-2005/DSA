# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # finding start point of a cycle in a circular linkedlist
        # step1- detect presence of cycle
        hascycle=False
        fast=head
        slow=head
        while fast!=None and fast.next!=None:
            fast=fast.next.next
            slow=slow.next
            if fast==slow:
                hascycle=True
                break
        if not hascycle:
            return None
        # step 2- find length of cycle
        length=0
        while slow.next!=fast:
            length+=1
            slow=slow.next
        length+=1
        slow=slow.next
        # step 3- determine st of cycle
        fast=head
        slow=head
        for _ in range(length):
            fast=fast.next
        while fast!=slow:
            fast=fast.next
            slow=slow.next
        return slow
