# Inorder= left->parent->right
# METGHOD 1- STACKED BASED
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root is None:
            return []
        stack=[]
        ans=[]
        curr=root
        while curr is not None or len(stack)>0:
            while curr is not None:
                stack.append(curr)
                curr=curr.left
            curr=stack.pop()
            ans.append(curr.val)
            curr=curr.right
        return ans

# METHOD 2- RECURSION BASED
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root is None:
            return []
        stack=[]
        ans=[]
        curr=root
        while curr is not None or len(stack)>0:
            while curr is not None:
                stack.append(curr)
                curr=curr.left
            curr=stack.pop()
            ans.append(curr.val)
            curr=curr.right
        return ans
